// hnav object
.rwd-object-hnav {
	@include clear-after;
	ul {
		@include clear-after;
		margin-bottom: 0;
		margin-top: 0;
		li {
			position: relative;
			&:hover {
				ul {
					display: block;
				}
			}
			ul {
				left: 0;
				right: 0;
			}
			a {
				display: block;
				line-height: 1em;
			}
		}
	}
	> ul {
		position: relative;
		> li {
			float: left;
			height: 100%;
			list-style: none;
			@include rem(margin-left, $hnav-margin / 2);
			@include rem(margin-right, $hnav-margin / 2);
			line-height: 1em;
			> a {

			}
			ul {
				display: none;
				position: absolute;
				top: 100%;
			}
		}
	}

	&.align-right {
		> ul {
			float: right;
		}
	}

	&.breakpoint-small {
		@include hnav-small;
	}

	.toggle,
	[data-trigger-flyout-id] {
		display: none;
	}
}

// hlist object
.rwd-object-hlist {
	> ul {
		@include clear-after;
		margin-bottom: 0;
		margin-top: 0;
		> li {
			float: left;
			height: 100%;
			list-style: none;
			line-height: 1em;
		}
	}
}

// media object
//http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/
.rwd-object-media {
	overflow: hidden;
	_overflow: visible;
	zoom: 1;
	.img, .video {
		float: left;
		overflow: hidden;
		@include rem(margin-right, $media-margin);
		img {
			display: block;
		}
		.media-figure {
			display: table;
			.media-caption {
				display: table-caption;
				caption-side: bottom;
			}
		}
		&.right {
			float: right;
			@include rem(margin-left, $media-margin);
			margin-right: 0;
		}
	}
	.bd {
		overflow: hidden;
		_overflow: visible;
		zoom: 1;
		@include rem(min-width, $media-text-min-width);
		&.in-text {
			overflow: visible;
		}
	}
	&.no-side-by-side {
		> .img, > .video {
			float: none;
			display: inline-block;
			margin-left: 0 !important;
			margin-right: 0 !important;
			margin-bottom: 0.75rem;
			max-width: 100% !important;
		}
		> .bd {
			min-width: 0 !important;
		}
		> .video {
			width: 100%;
			.rwd-video { min-width: 0; }
		}
	}
}

// halign object
.rwd-object-halign {
	text-align: center;
	position: relative;
	@include clear-after;
	> * {
		text-align: left;
		vertical-align: top;
	}

	.center {
		display: inline-block;
		text-align: left;
		float: none;
		&.text-align-center { text-align: center; }
	}
	.left {
		float: left;
	}
	.right {
		float: right;
	}

	&.no-side-by-side {
		&.rwd-object-valign-middle { display: block; }
		.left, .center, .right {
			float: none;
			margin: 0;
			margin-bottom: 0.75rem;
			width: auto;
			max-width: 100%;
			&:last-child { margin-bottom: 0; }
		}
		.left { margin-right: 0; }
		.right { margin-left: 0; }
	}
}

// halign object
.rwd-object-valign-middle {
	text-align: left;
	display: table;
	width: 100%;
	.left, .center, .right {
		float: none;
		display: table-cell;
		vertical-align: middle;
	}
	.right > * { float: right; }
}

// grid
[class*="rwd-object-columns-"] {
	@include clear-after;
	@include rem(margin-right, $grid-gutter/2 * -1);
	@include rem(margin-left, $grid-gutter/2 * -1);

	.column {
		@include box-sizing(border-box);
		float: left;
		display: block;
		@include rem(padding-right, $grid-gutter/2);
		@include rem(padding-left, $grid-gutter/2);
		min-height: 1px;
	}
	[class*="rwd-object-columns-"] {
		@include rem(padding-right, $grid-gutter/2);
		@include rem(padding-left, $grid-gutter/2);
		.column {
			&:first-of-type { padding-left: 0; }
			&:last-of-type { padding-right: 0; }
		}
	}

	&.fixed-width {
		.column {
			max-width: 100%;
		}
	}

	&.stacked-columns {
		@include stacked-columns;
	}
}

@for $column-count from 2 through $grid-columns {
	// by default, every column should be equal
	[class*="rwd-object-columns-#{$column-count}"] {
		> .column {
			width: percentage($grid-columns / $column-count / $grid-columns);
		}
		&.fixed-width {
			> .column {
				@include rem(width, $container-max-width / $column-count + $grid-gutter / $column-count);
				@include rem(padding-bottom, $grid-gutter);
			}
		}
	}

	// 2-columns
	@if $column-count == 2 {
		@for $i from 2 through $grid-columns - 2 {
			@for $j from 2 through $grid-columns - 2 {
				@if $i + $j == $grid-columns {
					[class*="rwd-object-columns-#{$column-count}-#{$i}-#{$j}"] {
						> .column:nth-child(1) { width: percentage($i / $grid-columns); }
						> .column:nth-child(2) { width: percentage($j / $grid-columns); }
						&.fixed-width {
							> .column:nth-child(1) { @include rem(width, $container-max-width / $grid-columns * $i + $grid-gutter / $grid-columns * $i); }
							> .column:nth-child(2) { @include rem(width, $container-max-width / $grid-columns * $j + $grid-gutter / $grid-columns * $j); }
						}
					}
				}
			}
		}
	}

	// 3-columns
	@if $column-count == 3 {
		@for $i from 2 through $grid-columns - 4 {
			@for $j from 2 through $grid-columns - 4 {
				@for $k from 2 through $grid-columns - 4 {
					@if $i + $j + $k == $grid-columns {
						[class*="rwd-object-columns-#{$column-count}-#{$i}-#{$j}-#{$k}"] {
							> .column:nth-child(1) { width: percentage($i / $grid-columns); }
							> .column:nth-child(2) { width: percentage($j / $grid-columns); }
							> .column:nth-child(3) { width: percentage($k / $grid-columns); }
							&.fixed-width {
								> .column:nth-child(1) { @include rem(width, $container-max-width / $grid-columns * $i + $grid-gutter / $grid-columns * $i); }
								> .column:nth-child(2) { @include rem(width, $container-max-width / $grid-columns * $j + $grid-gutter / $grid-columns * $j); }
								> .column:nth-child(3) { @include rem(width, $container-max-width / $grid-columns * $k + $grid-gutter / $grid-columns * $k); }
							}
						}
					}
				}
			}
		}
	}
}


.rwd-object-slider {
	overflow: hidden;
	width: 100%;
	position: relative;
	.container {
		@include clear-after;
		position: relative;
		overflow: hidden;
		left: 0;
		&.is-animated {
			@include transition(all $rwd-slider-slide-duration $rwd-slider-slide-transition);
		}
		.item {
			float: left;
			overflow: hidden;
			position: relative;
			@include clear-after;
			@include box-sizing(border-box);
			margin-right: $slider-margin + px;
		}
	}
	&.fade {
		> .container > .item {
			float: none;
			position: absolute;
			max-width: 100%;
			opacity: 0;
			@include transition(all $rwd-slider-fade-duration $rwd-slider-fade-transition);
			margin-right: 0;
			-webkit-backface-visibility: hidden;
			&.active {
				z-index: 1;
				opacity: 1;
			}
		}
	}
	.javascript-is-disabled & {
		&.fade {
			> .container > .item {
				position: static;
				opacity: 1;
			}
		}
		.next-button, .prev-button { display: none; }
	}
	&[class*="no-image-scaling-"] {
		> .container > .item img { max-width: none !important; }
	}
	&.no-image-scaling-align-right {
		> .container > .item img { float: right; }
	}
}

/* inspired by http://dbushell.com/2012/01/05/responsive-tables-2/ */
/* no media queries used though, rwd-object-table javascript solution */
.rwd-object-table {
	&.oversize {
		width: 100%;
		display: block;
		&.simple-scrolling {
			overflow-x: auto;
			-webkit-overflow-scrolling: touch;
		}
		&.fixed-thead {
			thead {
				@include rem(max-width, $rwd-thead-max-width);
				display: block;
				float: left;
				tr {
					display: block;
				}
				th {
					display: block;
				}
			}
			tbody {
				display: block;
				width: auto;
				overflow-x: auto;
				-webkit-overflow-scrolling: touch;
				white-space: nowrap;
				tr {
					display: inline-block;
					vertical-align: top;
				}
				td {
					display: block;
				}
			}
		}
	}
}

.rwd-object-flyout {
	display: none;
	position: absolute;
	left: 0;
	top: 0;
	overflow-y: auto;
	@include box-sizing(border-box);
	z-index: 9999;
	@include rem(width, $rwd-flyout-width);
	@include rem(margin-left, $rwd-flyout-width * -1);
	height: 100%;
	&.visible {
		display: block;
	}
}

body {
	&.flyout-mode {
		@include rem(min-width, 320);
		@include rem(margin-left, $rwd-flyout-width);
		overflow-x: hidden;
		position: relative;
	}
}